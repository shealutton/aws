{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "DevOps Engineering on AWS v1.5 Lab 4 - AWS CodeDeploy Auto Scaling CF",
  "Parameters": {
    "TestVPCCIDR": {
      "Description": "CIDR Block for Developer VPC",
      "Type": "String",
      "Default": "10.1.0.0/16",
      "AllowedValues": [
        "10.1.0.0/16"
      ]
    },
    "TestPublicSubnetCIDR": {
      "Description": "TestEnv Public Subnet",
      "Type": "String",
      "Default": "10.1.10.0/24",
      "AllowedValues": [
        "10.1.10.0/24"
      ]
    },
    "TestPrivateSubnetCIDR": {
      "Description": "TestEnv Private Subnet",
      "Type": "String",
      "Default": "10.1.15.0/24",
      "AllowedValues": [
        "10.1.15.0/24"
      ]
    },
    "KeyName": {
      "Description": "The name of the key used to access instances created by the template.",
      "Type": "String"
    }
  },
  "Mappings": {
    "AmazonLinuxAMI": {
      "us-east-1": {
        "AMI": "ami-1ecae776"
      },
      "us-west-1": {
        "AMI": "ami-d114f295"
      },
      "us-west-2": {
        "AMI": "ami-e7527ed7"
      },
      "eu-west-1": {
        "AMI": "ami-a10897d6"
      },
      "eu-central-1": {
        "AMI": "ami-a8221fb5"
      },
      "sa-east-1": {
        "AMI": "ami-b52890a8"
      },
      "ap-southeast-1": {
        "AMI": "ami-68d8e93a"
      },
      "ap-southeast-2": {
        "AMI": "ami-fd9cecc7"
      },
      "ap-northeast-1": {
        "AMI": "ami-cbf90ecb"
      }
    }
  },
  "Resources": {
    "TestVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "TestVPCCIDR"
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "VPC",
            "Value": "Test VPC"
          },
          {
            "Key": "Name",
            "Value": "Test VPC"
          }
        ]
      }
    },
    "TestInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "TestVPC"
    },
    "TestAttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": [
        "TestVPC",
        "TestInternetGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "InternetGatewayId": {
          "Ref": "TestInternetGateway"
        }
      }
    },
    "TestPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "CidrBlock": {
          "Ref": "TestPublicSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Test Public Subnet"
          }
        ]
      }
    },
    "TestPublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "TestVPC",
        "TestAttachGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Test Public Route Table"
          }
        ]
      }
    },
    "TestPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "TestPublicRouteTable",
        "TestAttachGateway"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "TestPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "TestInternetGateway"
        }
      }
    },
    "TestPublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "TestPublicRouteTable",
        "TestPublicSubnet",
        "TestAttachGateway"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "TestPublicSubnet"
        },
        "RouteTableId": {
          "Ref": "TestPublicRouteTable"
        }
      }
    },
    "TestPrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "CidrBlock": {
          "Ref": "TestPrivateSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Test Private Subnet"
          }
        ]
      }
    },
    "TestPrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Test Private Route Table"
          }
        ]
      }
    },
    "TestPrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "TestPublicRouteTable",
        "TestPrivateSubnet",
        "TestAttachGateway"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "TestPrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "TestPrivateRouteTable"
        }
      }
    },
    "TestPrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "VpcId": {
          "Ref": "TestVPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Test Private NACL"
          }
        ]
      }
    },
    "InstanceWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "InstanceWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "TestNATInstance",
      "Properties": {
        "Handle": {
          "Ref": "InstanceWaitHandle"
        },
        "Timeout": "1800"
      }
    },
    "TestNATInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "TestAttachGateway",
        "TestPublicRoute",
        "TestPublicSubnet"
      ],
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmazonLinuxAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": "t2.small",
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": "true",
            "SubnetId": {
              "Ref": "TestPublicSubnet"
            },
            "GroupSet": [
              {
                "Ref": "TestNATSecurityGroup"
              }
            ]
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT (Test VPC)"
          },
          {
            "Key": "InstanceType",
            "Value": "Infrastructure"
          },
          {
            "Key": "DeploymentType",
            "Value": "Test"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum -y update\n",
                "echo 1 > /proc/sys/net/ipv4/ip_forward\n",
                "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
                "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
                "/sbin/iptables-save > /etc/sysconfig/iptables\n",
                "mkdir -p /etc/sysctl.d/\n",
                "cat << NatConfFileMarker > /etc/sysctl.d/nat.conf\n",
                "net.ipv4.ip_forward = 1\n",
                "net.ipv4.conf.eth0.send_redirects = 0\n",
                "NatConfFileMarker\n\n",
                "/opt/aws/bin/cfn-signal -s true '",
                {
                  "Ref": "InstanceWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "TestNATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "TestVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "TestPrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "1024",
            "CidrIp": {
              "Ref": "TestPrivateSubnetCIDR"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "TestPrivateRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "TestNATInstance",
        "TestPrivateRouteTable"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "TestPrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "TestNATInstance"
        }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "TestAttachGateway",
      "Properties": {
        "GroupDescription": "Security Group for Web server",
        "VpcId": {
          "Ref": "TestVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "WebServerSecurityGroup"
          },
          {
            "Key": "InstanceType",
            "Value": "General"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "CodeDeployRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CodeDeployInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "CodeDeployRole",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployRole"
          }
        ]
      }
    },
    "CodeDeployLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "InstanceWaitCondition",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AmazonLinuxAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "AssociatePublicIpAddress": "true",
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "InstanceType": "t2.small",
        "IamInstanceProfile": {
          "Ref": "CodeDeployInstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdk",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": "10"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum -y update\n",
                "yum install -y aws-cli\n",
                "cd /home/ec2-user\n",
                "aws s3 cp s3://aws-codedeploy-",
                {
                  "Ref": "AWS::Region"
                },
                "/latest/install .\n",
                "chmod +x ./install\n",
                "./install auto\n"
              ]
            ]
          }
        }
      }
    },
    "AppAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "CodeDeployLaunchConfig",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "TestPrivateSubnet"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "CodeDeployLaunchConfig"
        },
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "TestPrivateSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "MinSize": "1",
        "MaxSize": "3",
        "LoadBalancerNames": [
          {
            "Ref": "AppLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "CodeDeployConfigured",
            "Value": "Yes",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": "CodeDeployAutoScalingGroup",
            "PropagateAtLaunch": "false"
          }
        ]
      }
    },
    "AppLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "TestPublicSubnet"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/index.php",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    }
  },
  "Outputs": {
    "AppAutoScalingGroupName": {
      "Description": "Name of the Auto Scaling group",
      "Value": {
        "Ref": "AppAutoScalingGroup"
      }
    },
    "ELBEndpoint" : {
      "Description" : "The URL for our Elastic Load Balancer.",
      "Value" : {
        "Fn::GetAtt" : [ "AppLoadBalancer", "DNSName" ]
      }
  }
    }
}
