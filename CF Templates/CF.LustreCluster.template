{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "RegionIsGovCloud": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "UseCloudWatchLogs": {
            "Fn::Equals": [
                "true",
                "true"
            ]
        },
        "UseIPSec": {
            "Fn::Equals": [
                {
                    "Ref": "EnableEncryption"
                },
                "true"
            ]
        },
        "UsePlacementGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PlacementGroupName"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "Create cluster of Lustre servers with persistent EBS volumes in a VPC subnet.",
    "Mappings": {
        "AWSInstanceType2Arch": {
            "c3.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c3.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c3.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "c3.large": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "c3.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c4.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c4.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c4.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c4.large": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "c4.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "cc1.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "cc2.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "hi1.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "hs1.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "i2.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "i2.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "i2.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "i2.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m3.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m3.large": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "m3.medium": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "m3.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m4.10xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m4.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m4.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "m4.large": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "m4.medium": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "m4.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "r3.2xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "r3.4xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "r3.8xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "r3.large": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "r3.xlarge": {
                "Arch": "64HVM",
                "EbsOptimized": "true"
            },
            "t2.large": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "t2.medium": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "t2.micro": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            },
            "t2.small": {
                "Arch": "64HVM",
                "EbsOptimized": "false"
            }
        },
        "AWSNATAMI": {
            "ap-northeast-1": {
                "AMI": "ami-c7e016c7"
            },
            "ap-southeast-1": {
                "AMI": "ami-b098a9e2"
            },
            "ap-southeast-2": {
                "AMI": "ami-0fed9d35"
            },
            "eu-central-1": {
                "AMI": "ami-3604392b"
            },
            "eu-west-1": {
                "AMI": "ami-cb7de3bc"
            },
            "sa-east-1": {
                "AMI": "ami-93fb408e"
            },
            "us-east-1": {
                "AMI": "ami-c02b04a8"
            },
            "us-gov-west-1": {
                "AMI": "ami-03197f20"
            },
            "us-west-1": {
                "AMI": "ami-67a54423"
            },
            "us-west-2": {
                "AMI": "ami-2dae821d"
            }
        },
        "AWSRegionArch2ServerAMI": {
            "ap-northeast-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "ap-southeast-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "ap-southeast-2": {
                "64": "NA",
                "64HVM": "NA"
            },
            "eu-west-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "sa-east-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "us-east-1": {
                "64": "NA",
                "64HVM": ""
            },
            "us-gov-west-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "us-west-1": {
                "64": "NA",
                "64HVM": "NA"
            },
            "us-west-2": {
                "64": "NA",
                "64HVM": "ami-39749859"
            }
        },
        "InstanceSpotPrice": {
            "c3.2xlarge": {
                "price": "0.60"
            },
            "c3.4xlarge": {
                "price": "1.20"
            },
            "c3.8xlarge": {
                "price": "2.00"
            },
            "c3.large": {
                "price": "0.15"
            },
            "c3.xlarge": {
                "price": "0.30"
            },
            "cc2.8xlarge": {
                "price": "1.00"
            },
            "m3.2xlarge": {
                "price": "1.00"
            },
            "m3.xlarge": {
                "price": "0.50"
            }
        }
    },
    "Outputs": {
        "Dashboard": {
            "Description": "Monitoring interface for the Lustre servers.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        },
        "Gateway": {
            "Description": "Public IP of NAT gateway, use for SSH access",
            "Value": {
                "Fn::GetAtt": [
                    "NATDevice",
                    "PublicIp"
                ]
            }
        }
    },
    "Parameters": {
        "AccessFrom": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": "Lockdown access to Lustre services (default is accessiable for 0.0.0.0/0)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "KeyName": {
          "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "OstVolumeType": {
          "AllowedValues": [
                "io1",
                "gp2"
            ],
          "Default": "gp2",
          "Description": "EBS Volume type for OSS Volumes",
          "Type": "String"
        },
        "OstVolumePIOPS": {
          "Default": "0",
          "Description": "PIOPS for EBS OSS Volume. For GP2 volumes, set to 0",
          "Type": "String"
        },
        "EnableEncryption": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "false",
            "Description": "Enable encryption of Lustre traffic over the wire and on disk.",
            "Type": "String"
        },
        "FsName": {
            "Default": "scratch",
            "Description": "Name of the lustre filesystem.",
            "Type": "String"
        },
        "HTTPFrom": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": "Lockdown access to Lustre Ganglia on MGS (default is accessiable for 0.0.0.0/0)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "ImportBucket": {
            "Default": "",
            "Description": "[Optional] Bucket to import data from.",
            "Type": "String"
        },
        "ImportDest": {
            "Default": "",
            "Description": "[Optional] Subdirectory in Lustre filesystem to import data into. Will default to ImportPrefix, if specified. ",
            "Type": "String"
        },
        "ImportPrefix": {
            "Default": "",
            "Description": "[Optional] Import all keys below prefix in ImportBucket. If unspecified, all keys in ImportBucket will be imported.",
            "Type": "String"
        },
        "MdsCount": {
            "Default": "1",
            "Description": "Number of MDS instances.",
            "Type": "Number"
        },
        "MdsInstanceType": {
            "AllowedValues": [
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "m4.10xlarge"
            ],
            "Default": "c3.2xlarge",
            "Description": "Instance type used for Lustre servers",
            "Type": "String"
        },
        "MdsUseEbs": {
            "Default": "true",
            "Description": "EBS volumes are created in the CFN template.",
            "Type": "String"
        },
        "MdtVolumeCount": {
            "Default": "4",
            "Description": "Size of EBS volumes to use for MDTs. All instances have 5 EBS volumes attached.",
            "Type": "Number"
        },
        "MdtVolumeSize": {
            "Default": "40",
            "Description": "Size of EBS volumes to use for MDTs. All instances have 5 EBS volumes attached.",
            "Type": "Number"
        },
        "MgsInstanceType": {
            "Default": "c4.xlarge",
            "Description": "Instance type used for Lustre MGS servers",
            "Type": "String"
        },
        "NATInstanceType": {
            "AllowedValues": [
                "t1.micro",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "cc2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "m3.medium",
            "Description": "NAT Device EC2 instance type",
            "Type": "String"
        },
        "OssCount": {
            "Default": "4",
            "Description": "Number of OSS instances.",
            "Type": "Number"
        },
        "OssInstanceType": {
            "AllowedValues": [
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "m4.10xlarge"
            ],
            "Default": "c3.4xlarge",
            "Description": "Instance type used for Lustre OSS servers",
            "Type": "String"
        },
        "OssUseEbs": {
            "Default": "true",
            "Description": "EBS volumes are created in the CFN template.",
            "Type": "String"
        },
        "OstRaid": {
            "AllowedValues": [
                "stripe",
                "jbod"
            ],
            "Default": "stripe",
            "Description": "Configure how storage is used by the lustre target. Stripe mode creates a single Lustre target on a RAID0 volume containing all available storage volumes. JBOD mode creates one Lustre target per available volume.",
            "Type": "String"
        },
        "OstVolumeCount": {
            "Default": "4",
            "Description": "Number of EBS volumes to create for each OST.",
            "Type": "Number"
        },
        "OstVolumeSize": {
            "Default": "100",
            "Description": "Size of EBS volumes to use for OSTs.",
            "Type": "Number"
        },
        "PlacementGroupName": {
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "can contain only ASCII characters.",
            "Default": "",
            "Description": "Name of Placement Group to use (optional, leave blank if not required)",
            "MaxLength": "32",
            "MinLength": "0",
            "Type": "String"
        },
        "SSHFrom": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": "Lockdown SSH access to the NAT host (default can be accessed from anywhere)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "VpcId": {
            "AllowedPattern": "vpc-[a-z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.",
            "Default": "vpc-",
            "Description": "Id of an exisiting VPC that contains a public subnet i.e. vpc-d54ebebf",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "AWS::EC2::VPC::Id"
        },
        "VpcPrivateCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "10.0.2.0/24",
            "Description": "CIDR for new private subnet i.e. 10.0.2.0/24",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "VpcPublicSubnetId": {
            "AllowedPattern": "subnet-[a-z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.",
            "Default": "subnet-",
            "Description": "Id of an exisiting public VPC subnet i.e. subnet-ae4ebec4",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "WorkerCount": {
            "Default": "2",
            "Description": "Number of Worker instances.",
            "Type": "Number"
        },
        "WorkerInstanceType": {
            "AllowedValues": [
                "c3.large",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "m4.10xlarge"
            ],
            "Default": "c3.large",
            "Description": "Instance type used for Worker instances",
            "Type": "String"
        }
    },
    "Resources": {
        "BasePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Fn::If": [
                                "UseCloudWatchLogs",
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Action": [
                                "EC2:DescribeInstances",
                                "EC2:DescribeInstanceStatus",
                                "EC2:DescribeNetworkInterfaces",
                                "EC2:DescribeNetworkInterfaceAttribute",
                                "EC2:CreateTags",
                                "CloudFormation:*",
                                "dynamodb:*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                },
                "PolicyName": "BasePolicy",
                "Roles": [
                    {
                        "Ref": "ServerRole"
                    },
                    {
                        "Ref": "WorkerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "ELBSecurityGroup": {
            "Properties": {
                "GroupDescription": "External access to MGS",
                "SecurityGroupEgress": [
                    {
                        "DestinationSecurityGroupId": {
                            "Ref": "LustreSecurityGroup"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "AccessFrom"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": {
                            "Ref": "AccessFrom"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": {
                            "Ref": "HTTPFrom"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": {
                            "Ref": "SSHFrom"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ElasticLoadBalancer": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "TCP:",
                                "80"
                            ]
                        ]
                    },
                    "Timeout": "5",
                    "UnhealthyThreshold": "10"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "VpcPublicSubnetId"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "FilesystemTable": {
            "Properties": {
                "KeySchema": {
                    "HashKeyElement": {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "10",
                    "WriteCapacityUnits": "5"
                }
            },
            "Type": "AWS::DynamoDB::Table"
        },
        "HaLustreResources": {
            "DependsOn": [
                "MGSWaitCondition",
                "MGSNodes",
                "HaResourceQueue",
                "HaResourceTopic",
                "HaResourceQueuePolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Ref": "HaResourceTopic"
                }
            },
            "Type": "Custom::HaLustreResources",
            "Version": "0.1"
        },
        "HaResourceQueue": {
            "Properties": {
                "ReceiveMessageWaitTimeSeconds": "20",
                "VisibilityTimeout": "30"
            },
            "Type": "AWS::SQS::Queue"
        },
        "HaResourceQueuePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Id": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::GetAtt": [
                                        "HaResourceQueue",
                                        "Arn"
                                    ]
                                },
                                "HaResourceQueuePolicy"
                            ]
                        ]
                    },
                    "Statement": [
                        {
                            "Action": "SQS:SendMessage",
                            "Condition": {
                                "ArnEquals": {
                                    "aws:SourceArn": {
                                        "Ref": "HaResourceTopic"
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Resource": {
                                "Fn::GetAtt": [
                                    "HaResourceQueue",
                                    "Arn"
                                ]
                            },
                            "Sid": "AllowTopicToPublishMessages"
                        }
                    ],
                    "Version": "2008-10-17"
                },
                "Queues": [
                    {
                        "Ref": "HaResourceQueue"
                    }
                ]
            },
            "Type": "AWS::SQS::QueuePolicy"
        },
        "HaResourceTopic": {
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "HaResourceQueue",
                                "Arn"
                            ]
                        },
                        "Protocol": "sqs"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "InboundPrivateNetworkAclEntry": {
            "DependsOn": "PrivateNetworkAcl",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "LustreInternalSecurityGroupIngress": {
            "Properties": {
                "FromPort": "0",
                "GroupId": {
                    "Ref": "LustreSecurityGroup"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "LustreSecurityGroup"
                },
                "ToPort": "65535"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "LustreSecurityGroup": {
            "Properties": {
                "GroupDescription": "Subnet access to Lustre servers",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "Fn::If": [
                            "UseIPSec",
                            {
                                "CidrIp": "0.0.0.0/0",
                                "FromPort": "500",
                                "IpProtocol": "udp",
                                "ToPort": "500"
                            },
                            {
                                "CidrIp": "0.0.0.0/0",
                                "FromPort": "988",
                                "IpProtocol": "tcp",
                                "ToPort": "988"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "UseIPSec",
                            {
                                "CidrIp": "0.0.0.0/0",
                                "FromPort": "-1",
                                "IpProtocol": "50",
                                "ToPort": "-1"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": {
                            "Ref": "SSHFrom"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "MDSLaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "01_loci_init": {
                                "command": "loci init"
                            }
                        },
                        "files": {
                            "/etc/loci.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "FsName:",
                                            {
                                                "Ref": "FsName"
                                            },
                                            "\n",
                                            "FilesystemTable:",
                                            {
                                                "Ref": "FilesystemTable"
                                            },
                                            "\n",
                                            "HaEnabled: ",
                                            "true",
                                            "\n",
                                            "ImportBucket:",
                                            {
                                                "Ref": "ImportBucket"
                                            },
                                            "\n",
                                            "ImportPrefix:",
                                            {
                                                "Ref": "ImportPrefix"
                                            },
                                            "\n",
                                            "ImportDest:",
                                            {
                                                "Ref": "ImportDest"
                                            },
                                            "\n",
                                            "LogDir: ",
                                            "/var/log",
                                            "\n",
                                            "EnableCloudWatchLogs:",
                                            "true",
                                            "\n",
                                            "EnableEncryption:",
                                            {
                                                "Ref": "EnableEncryption"
                                            },
                                            "\n",
                                            "RolesTable:",
                                            {
                                                "Ref": "RolesTable"
                                            },
                                            "\n",
                                            "MdsCount:",
                                            {
                                                "Ref": "MdsCount"
                                            },
                                            "\n",
                                            "OssCount:",
                                            {
                                                "Ref": "OssCount"
                                            },
                                            "\n",
                                            "MdtVolumeCount:",
                                            {
                                                "Ref": "MdtVolumeCount"
                                            },
                                            "\n",
                                            "OstVolumeCount:",
                                            {
                                                "Ref": "OstVolumeCount"
                                            },
                                            "\n",
                                            "GangliaVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumeSize:",
                                            "10",
                                            "\n",
                                            "MgtVolumeSize:",
                                            "5",
                                            "\n",
                                            "MdtRaid:",
                                            "stripe",
                                            "\n",
                                            "MdtVolumeSize:",
                                            {
                                                "Ref": "MdtVolumeSize"
                                            },
                                            "\n",
                                            "MdtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "MdtVolumePiops: ",
                                            0,
                                            "\n",
                                            "OstRaid:",
                                            {
                                                "Ref": "OstRaid"
                                            },
                                            "\n",
                                            "OstVolumeSize:",
                                            {
                                                "Ref": "OstVolumeSize"
                                            },
                                            "\n",
                                            "OstVolumeType: ",
                                            { "Ref": "OstVolumeType" },
                                            "\n",
                                            "OstVolumePiops: ",
                                            { "Ref": "OstVolumePIOPS" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00644",
                                "user": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "AWSInstanceType2Arch",
                        {
                            "Ref": "MdsInstanceType"
                        },
                        "EbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2ServerAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "MdsInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceMonitoring": "true",
                "InstanceType": {
                    "Ref": "MdsInstanceType"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [
                    {
                        "Ref": "LustreSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r MDSLaunchConfig ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal -e $? -r 'MDS cfn-init failed' '",
                                {
                                    "Ref": "MDSWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "MDSNodes": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PrivateSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "MdsCount"
                },
                "LaunchConfigurationName": {
                    "Ref": "MDSLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "MdsCount"
                },
                "MinSize": {
                    "Ref": "MdsCount"
                },
                "PlacementGroup": {
                    "Fn::If": [
                        "UsePlacementGroup",
                        {
                            "Ref": "PlacementGroupName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "lustre:type",
                        "PropagateAtLaunch": "true",
                        "Value": "mdt"
                    },
                    {
                        "Key": "loci:application",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "MDSWaitCondition": {
            "DependsOn": [
                "HaLustreResources",
                "MDSNodes"
            ],
            "Properties": {
                "Count": {
                    "Ref": "MdsCount"
                },
                "Handle": {
                    "Ref": "MDSWaitHandle"
                },
                "Timeout": "1800"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "MDSWaitHandle": {
            "Properties": {},
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "MGSLaunchConfig": {
            "DependsOn": [
                "ServerRole",
                "ServerInstanceProfile"
            ],
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/cfn/bridge.d/ha_lustre_resources.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[ha_lustre_volumes]\n",
                                            "resource_type=Custom::HaLustreResources\n",
                                            "queue_url=",
                                            {
                                                "Ref": "HaResourceQueue"
                                            },
                                            "\n",
                                            "default_action=/usr/bin/loci_cfn_bridge\n"
                                        ]
                                    ]
                                }
                            },
                            "/etc/loci.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "FsName:",
                                            {
                                                "Ref": "FsName"
                                            },
                                            "\n",
                                            "FilesystemTable:",
                                            {
                                                "Ref": "FilesystemTable"
                                            },
                                            "\n",
                                            "HaEnabled: ",
                                            "true",
                                            "\n",
                                            "ImportBucket:",
                                            {
                                                "Ref": "ImportBucket"
                                            },
                                            "\n",
                                            "ImportPrefix:",
                                            {
                                                "Ref": "ImportPrefix"
                                            },
                                            "\n",
                                            "ImportDest:",
                                            {
                                                "Ref": "ImportDest"
                                            },
                                            "\n",
                                            "LogDir: ",
                                            "/var/log",
                                            "\n",
                                            "EnableCloudWatchLogs:",
                                            "true",
                                            "\n",
                                            "EnableEncryption:",
                                            {
                                                "Ref": "EnableEncryption"
                                            },
                                            "\n",
                                            "RolesTable:",
                                            {
                                                "Ref": "RolesTable"
                                            },
                                            "\n",
                                            "MdsCount:",
                                            {
                                                "Ref": "MdsCount"
                                            },
                                            "\n",
                                            "OssCount:",
                                            {
                                                "Ref": "OssCount"
                                            },
                                            "\n",
                                            "MdtVolumeCount:",
                                            {
                                                "Ref": "MdtVolumeCount"
                                            },
                                            "\n",
                                            "OstVolumeCount:",
                                            {
                                                "Ref": "OstVolumeCount"
                                            },
                                            "\n",
                                            "GangliaVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumeSize:",
                                            "10",
                                            "\n",
                                            "MgtVolumeSize:",
                                            "5",
                                            "\n",
                                            "MdtRaid:",
                                            "stripe",
                                            "\n",
                                            "MdtVolumeSize:",
                                            {
                                                "Ref": "MdtVolumeSize"
                                            },
                                            "\n",
                                            "MdtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "MdtVolumePiops: ",
                                            0,
                                            "\n",
                                            "OstRaid:",
                                            {
                                                "Ref": "OstRaid"
                                            },
                                            "\n",
                                            "OstVolumeSize:",
                                            {
                                                "Ref": "OstVolumeSize"
                                            },
                                            "\n",
                                            "OstVolumeType: ",
                                            { "Ref": "OstVolumeType" },
                                            "\n",
                                            "OstVolumePiops: ",
                                            { "Ref": "OstVolumePIOPS" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00644",
                                "user": "root"
                            },
                            "/etc/sudoers.d/999-requiretty": {
                                "content": "Defaults !requiretty\n",
                                "group": "root",
                                "mode": "00400",
                                "user": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-resource-bridge": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "AWSInstanceType2Arch",
                        {
                            "Ref": "MgsInstanceType"
                        },
                        "EbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2ServerAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "MgsInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "MgsInstanceType"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [
                    {
                        "Ref": "LustreSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r MGSLaunchConfig ",
                                "     --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal -e $? -r 'MGS cfn-init failed.' '",
                                {
                                    "Ref": "MGSWaitHandle"
                                },
                                "'\n",
                                "loci init\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "MGSNodes": {
            "DependsOn": [
                "ServerPolicy",
                "MGSLaunchConfig",
                "FilesystemTable",
                "RolesTable",
                "PrivateSubnet",
                "PrivateRouteGateway"
            ],
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PrivateSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "DesiredCapacity": 1,
                "LaunchConfigurationName": {
                    "Ref": "MGSLaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": 1,
                "MinSize": 1,
                "PlacementGroup": {
                    "Fn::If": [
                        "UsePlacementGroup",
                        {
                            "Ref": "PlacementGroupName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "lustre:type",
                        "PropagateAtLaunch": "true",
                        "Value": "mgt"
                    },
                    {
                        "Key": "loci:application",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "MGSWaitCondition": {
            "DependsOn": "MGSNodes",
            "Properties": {
                "Count": "1",
                "Handle": {
                    "Ref": "MGSWaitHandle"
                },
                "Timeout": "600"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "MGSWaitHandle": {
            "Properties": {},
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "NATDevice": {
            "DependsOn": [
                "NATSecurityGroup"
            ],
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": { "Ref": "KeyName" },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "NATSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "VpcPublicSubnetId"
                        }
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "loci:application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "NATDevice"
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "NATSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "VpcPrivateCIDR"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VpcPrivateCIDR"
                        },
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": {
                            "Ref": "SSHFrom"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "OSSLaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "01_loci_init": {
                                "command": "loci init"
                            }
                        },
                        "files": {
                            "/etc/loci.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "FsName:",
                                            {
                                                "Ref": "FsName"
                                            },
                                            "\n",
                                            "FilesystemTable:",
                                            {
                                                "Ref": "FilesystemTable"
                                            },
                                            "\n",
                                            "HaEnabled: ",
                                            "true",
                                            "\n",
                                            "ImportBucket:",
                                            {
                                                "Ref": "ImportBucket"
                                            },
                                            "\n",
                                            "ImportPrefix:",
                                            {
                                                "Ref": "ImportPrefix"
                                            },
                                            "\n",
                                            "ImportDest:",
                                            {
                                                "Ref": "ImportDest"
                                            },
                                            "\n",
                                            "LogDir: ",
                                            "/var/log",
                                            "\n",
                                            "EnableCloudWatchLogs:",
                                            "true",
                                            "\n",
                                            "EnableEncryption:",
                                            {
                                                "Ref": "EnableEncryption"
                                            },
                                            "\n",
                                            "RolesTable:",
                                            {
                                                "Ref": "RolesTable"
                                            },
                                            "\n",
                                            "MdsCount:",
                                            {
                                                "Ref": "MdsCount"
                                            },
                                            "\n",
                                            "OssCount:",
                                            {
                                                "Ref": "OssCount"
                                            },
                                            "\n",
                                            "MdtVolumeCount:",
                                            {
                                                "Ref": "MdtVolumeCount"
                                            },
                                            "\n",
                                            "OstVolumeCount:",
                                            {
                                                "Ref": "OstVolumeCount"
                                            },
                                            "\n",
                                            "GangliaVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumeSize:",
                                            "10",
                                            "\n",
                                            "MgtVolumeSize:",
                                            "5",
                                            "\n",
                                            "MdtRaid:",
                                            "stripe",
                                            "\n",
                                            "MdtVolumeSize:",
                                            {
                                                "Ref": "MdtVolumeSize"
                                            },
                                            "\n",
                                            "MdtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "MdtVolumePiops: ",
                                            0,
                                            "\n",
                                            "OstRaid:",
                                            {
                                                "Ref": "OstRaid"
                                            },
                                            "\n",
                                            "OstVolumeSize:",
                                            {
                                                "Ref": "OstVolumeSize"
                                            },
                                            "\n",
                                            "OstVolumeType: ",
                                            { "Ref": "OstVolumeType" },
                                            "\n",
                                            "OstVolumePiops: ",
                                            { "Ref": "OstVolumePIOPS" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00644",
                                "user": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "AWSInstanceType2Arch",
                        {
                            "Ref": "OssInstanceType"
                        },
                        "EbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2ServerAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "OssInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceMonitoring": "true",
                "InstanceType": {
                    "Ref": "OssInstanceType"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [
                    {
                        "Ref": "LustreSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r OSSLaunchConfig ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal -e $? -r 'OSS loci init failed.' '",
                                {
                                    "Ref": "OssWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "OSSNodes": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PrivateSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "OssCount"
                },
                "LaunchConfigurationName": {
                    "Ref": "OSSLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "OssCount"
                },
                "MinSize": {
                    "Ref": "OssCount"
                },
                "PlacementGroup": {
                    "Fn::If": [
                        "UsePlacementGroup",
                        {
                            "Ref": "PlacementGroupName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "lustre:type",
                        "PropagateAtLaunch": "true",
                        "Value": "ost"
                    },
                    {
                        "Key": "loci:application",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "OssWaitCondition": {
            "DependsOn": [
                "HaLustreResources",
                "OSSNodes"
            ],
            "Properties": {
                "Count": {
                    "Ref": "OssCount"
                },
                "Handle": {
                    "Ref": "OssWaitHandle"
                },
                "Timeout": "1800"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "OssWaitHandle": {
            "Properties": {},
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "OutboundPrivateNetworkAclEntry": {
            "DependsOn": "PrivateNetworkAcl",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "loci:application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PrivateRouteGateway": {
            "DependsOn": [
                "NATDevice",
                "PrivateSubnetRouteTableAssociation",
                "PrivateSubnetNetworkAclAssociation"
            ],
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "loci:application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "NATDevice",
                        "AvailabilityZone"
                    ]
                },
                "CidrBlock": {
                    "Ref": "VpcPrivateCIDR"
                },
                "Tags": [
                    {
                        "Key": "loci:application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnetNetworkAclAssociation": {
            "DependsOn": [
                "InboundPrivateNetworkAclEntry",
                "OutboundPrivateNetworkAclEntry"
            ],
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateSubnetRouteTableAssociation": {
            "DependsOn": "PrivateRouteTable",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "RolesTable": {
            "Properties": {
                "KeySchema": {
                    "HashKeyElement": {
                        "AttributeName": "role_name",
                        "AttributeType": "S"
                    }
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "10",
                    "WriteCapacityUnits": "5"
                }
            },
            "Type": "AWS::DynamoDB::Table"
        },
        "ServerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ServerPolicy": {
            "DependsOn": "BasePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ec2:AttachNetworkInterface",
                                "ec2:AttachVolume",
                                "ec2:CreateNetworkInterface",
                                "ec2:CreateVolume",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DeleteVolume",
                                "ec2:DetachNetworkInterface",
                                "ec2:DetachVolume",
                                "ec2:CreateSnapshot",
                                "ec2:DescribeSnapshots",
                                "ec2:DeleteSnapshot",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeNetworkInterfaceAttribute",
                                "ec2:DescribeVolumes",
                                "ec2:DescribeVolumeAttribute",
                                "ec2:DescribeVolumeStatus",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:UpdateAutoScalingGroup"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sqs:ChangeMessageVisibility",
                                "sqs:DeleteMessage",
                                "sqs:ReceiveMessage"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "HaResourceQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "ServerPolicy",
                "Roles": [
                    {
                        "Ref": "ServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "ServerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "WorkerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WorkerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "WorkerLaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/loci.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "FsName:",
                                            {
                                                "Ref": "FsName"
                                            },
                                            "\n",
                                            "FilesystemTable:",
                                            {
                                                "Ref": "FilesystemTable"
                                            },
                                            "\n",
                                            "HaEnabled: ",
                                            "true",
                                            "\n",
                                            "ImportBucket:",
                                            {
                                                "Ref": "ImportBucket"
                                            },
                                            "\n",
                                            "ImportPrefix:",
                                            {
                                                "Ref": "ImportPrefix"
                                            },
                                            "\n",
                                            "ImportDest:",
                                            {
                                                "Ref": "ImportDest"
                                            },
                                            "\n",
                                            "LogDir: ",
                                            "/var/log",
                                            "\n",
                                            "EnableCloudWatchLogs:",
                                            "true",
                                            "\n",
                                            "EnableEncryption:",
                                            {
                                                "Ref": "EnableEncryption"
                                            },
                                            "\n",
                                            "RolesTable:",
                                            {
                                                "Ref": "RolesTable"
                                            },
                                            "\n",
                                            "MdsCount:",
                                            {
                                                "Ref": "MdsCount"
                                            },
                                            "\n",
                                            "OssCount:",
                                            {
                                                "Ref": "OssCount"
                                            },
                                            "\n",
                                            "MdtVolumeCount:",
                                            {
                                                "Ref": "MdtVolumeCount"
                                            },
                                            "\n",
                                            "OstVolumeCount:",
                                            {
                                                "Ref": "OstVolumeCount"
                                            },
                                            "\n",
                                            "GangliaVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumePiops: ",
                                            0,
                                            "\n",
                                            "MgtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "GangliaVolumeSize:",
                                            "10",
                                            "\n",
                                            "MgtVolumeSize:",
                                            "5",
                                            "\n",
                                            "MdtRaid:",
                                            "stripe",
                                            "\n",
                                            "MdtVolumeSize:",
                                            {
                                                "Ref": "MdtVolumeSize"
                                            },
                                            "\n",
                                            "MdtVolumeType: ",
                                            "gp2",
                                            "\n",
                                            "MdtVolumePiops: ",
                                            0,
                                            "\n",
                                            "OstRaid:",
                                            {
                                                "Ref": "OstRaid"
                                            },
                                            "\n",
                                            "OstVolumeSize:",
                                            {
                                                "Ref": "OstVolumeSize"
                                            },
                                            "\n",
                                            "OstVolumeType: ",
                                            { "Ref": "OstVolumeType" },
                                            "\n",
                                            "OstVolumePiops: ",
                                            { "Ref": "OstVolumePIOPS" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "00644",
                                "user": "root"
                            },
                            "/etc/profile.d/openmpi.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "module add openmpi-x86_64\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            }
                        },
                        "packages": {
                            "yum": {
                                "bonnie++": [],
                                "dbench": [],
                                "environment-modules": [],
                                "openmpi": [],
                                "screen": []
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "WorkerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2ServerAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "WorkerInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceMonitoring": "true",
                "InstanceType": {
                    "Ref": "WorkerInstanceType"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [
                    {
                        "Ref": "LustreSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r WorkerLaunchConfig ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "loci init\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "WorkerNodes": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PrivateSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "WorkerCount"
                },
                "LaunchConfigurationName": {
                    "Ref": "WorkerLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "WorkerCount"
                },
                "MinSize": {
                    "Ref": "WorkerCount"
                },
                "PlacementGroup": {
                    "Fn::If": [
                        "UsePlacementGroup",
                        {
                            "Ref": "PlacementGroupName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "lustre:type",
                        "PropagateAtLaunch": "true",
                        "Value": "client"
                    },
                    {
                        "Key": "loci:application",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "WorkerPolicy": {
            "DependsOn": "BasePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::If": [
                                                    "RegionIsGovCloud",
                                                    "arn:aws-us-gov:s3:::",
                                                    "arn:aws:s3:::"
                                                ]
                                            },
                                            {
                                                "Ref": "ImportBucket"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::If": [
                                                    "RegionIsGovCloud",
                                                    "arn:aws-us-gov:s3:::",
                                                    "arn:aws:s3:::"
                                                ]
                                            },
                                            {
                                                "Ref": "ImportBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "PolicyName": "ServerPolicy",
                "Roles": [
                    {
                        "Ref": "WorkerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "WorkerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
